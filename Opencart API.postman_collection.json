{
	"info": {
		"_postman_id": "c46a70f6-d45d-407d-bd68-e80c4534e3e0",
		"name": "Opencart API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45210294"
	},
	"item": [
		{
			"name": "Create Session/Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for creating session/token\",function(){",
							"    pm.response.to.have.status(200)",
							"});",
							"let jsonData = pm.response.json();",
							"let api_token = jsonData.api_token",
							"pm.environment.set(\"api_token\",api_token)",
							"pm.test(\"Success message for API creation\",function(){",
							"    pm.expect(jsonData.success).to.eql(\"Success: API session successfully started!\");",
							"",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Response has 'success' message\", function () {",
							"    pm.expect(jsonData).to.have.property(\"success\");",
							"});",
							"",
							"pm.test(\"Response has 'api_token'\", function () {",
							"    pm.expect(jsonData).to.have.property(\"api_token\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "demoopencart",
							"type": "text"
						},
						{
							"key": "key",
							"value": "f2PFwoNf4t3B3XFfF5z1JeVtNL4YhqbDbAPOJSOGhHGITQ3McE4vIaFeTYC1cHtcOoAwUx337NpYroOHVIAnsuvLpteR5qcbZBlDe87qiKghQcoqwQD8eMrF2Jh6UXQlm771bWDuy2jkHTajtpuYFe8jN5CJXd2GcP1ALwFvqPrCn3cHlAUVLiKCUEyJluZCwObvst1LiejXQTWvgvqNXH7P7QI4b3b16rw2kOFhSBttNz5wfj4J7yBFAGObJR2S",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}api/login",
					"host": [
						"{{baseUrl}}api"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Product to cart",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"product_id\",\"40\");",
							"pm.collectionVariables.set(\"quantity\", \"2\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code for add product to cart is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"",
							"});",
							"",
							"pm.test(\"checking success message of response\",function(){",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(\"Success: You have modified your shopping cart!\");",
							"",
							"});",
							"//Response Format Check (Content-Type)",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{api_token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "api_token",
							"type": "string"
						},
						{
							"key": "in",
							"value": "query",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "product_id",
							"value": "{{product_id}}",
							"type": "text"
						},
						{
							"key": "quantity",
							"value": "{{quantity}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}api/cart/add",
					"host": [
						"{{baseUrl}}api"
					],
					"path": [
						"cart",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "Cart content",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the status for GET Cart content is 200\",function(){",
							"pm.response.to.have.status(200)",
							"});",
							"",
							"let jsonData = pm.response.json();",
							"console.log(jsonData)",
							"//validation of response",
							"",
							"pm.test(\"check the product id\",function(){",
							"pm.expect(jsonData.products[0].product_id).to.eql(pm.collectionVariables.get(\"product_id\"));",
							"});",
							"",
							"pm.collectionVariables.set(\"cart_id\", jsonData.products[0].cart_id)",
							"",
							"",
							"",
							"",
							"",
							"// 2. Response structure validation",
							"pm.test(\"Response has products, vouchers, and totals keys\", () => {",
							"    pm.expect(jsonData).to.have.property('products');",
							"    pm.expect(jsonData).to.have.property('vouchers');",
							"    pm.expect(jsonData).to.have.property('totals');",
							"});",
							"",
							"// 3. Validate products array and product fields",
							"pm.test(\"Products array validation\", () => {",
							"    pm.expect(jsonData.products).to.be.an('array').that.is.not.empty;",
							"",
							"    jsonData.products.forEach(product => {",
							"        pm.expect(product).to.include.all.keys(",
							"            'cart_id', 'product_id', 'name', 'model', 'option', 'quantity', 'stock', 'shipping', 'price', 'total', 'reward'",
							"        );",
							"        pm.expect(product.cart_id).to.be.a('string');",
							"        pm.expect(product.product_id).to.be.a('string');",
							"        pm.expect(product.name).to.be.a('string');",
							"        pm.expect(product.model).to.be.a('string');",
							"        pm.expect(product.option).to.be.an('array');",
							"        pm.expect(product.quantity).to.match(/^\\d+$/);",
							"        pm.expect(product.stock).to.be.a('boolean');",
							"        pm.expect(product.shipping).to.be.a('string');",
							"        pm.expect(product.price).to.match(/^\\$\\d+(\\.\\d{2})?$/);",
							"        pm.expect(product.total).to.match(/^\\$\\d+(\\.\\d{2})?$/);",
							"        pm.expect(product.reward).to.satisfy(val => typeof val === 'number' || typeof val === 'string');",
							"    });",
							"});",
							"",
							"// 4. Validate vouchers array",
							"pm.test(\"Vouchers array validation\", () => {",
							"    pm.expect(jsonData.vouchers).to.be.an('array');",
							"});",
							"",
							"// 5. Validate totals array and fields",
							"pm.test(\"Totals array validation\", () => {",
							"    pm.expect(jsonData.totals).to.be.an('array').that.is.not.empty;",
							"    jsonData.totals.forEach(total => {",
							"        pm.expect(total).to.have.all.keys('title', 'text');",
							"        pm.expect(total.title).to.be.a('string');",
							"        pm.expect(total.text).to.match(/^\\$\\d+(\\.\\d{2})?$/);",
							"    });",
							"});",
							"",
							"// 6. Logical validations for totals sum and product total",
							"",
							"pm.test(\"Total matches sum of Sub-Total, Eco Tax and VAT\", () => {",
							"    // Helper to parse currency string like \"$492.80\" to float 492.80",
							"    const parseCurrency = str => parseFloat(str.replace('$', ''));",
							"",
							"    const subTotalObj = jsonData.totals.find(t => t.title === 'Sub-Total');",
							"    const ecoTaxObj = jsonData.totals.find(t => t.title.toLowerCase().includes('eco tax'));",
							"    const vatObj = jsonData.totals.find(t => t.title.toLowerCase().includes('vat'));",
							"    const totalObj = jsonData.totals.find(t => t.title === 'Total');",
							"",
							"    pm.expect(subTotalObj).to.not.be.undefined;",
							"    pm.expect(ecoTaxObj).to.not.be.undefined;",
							"    pm.expect(vatObj).to.not.be.undefined;",
							"    pm.expect(totalObj).to.not.be.undefined;",
							"",
							"    const calculatedTotal = parseCurrency(subTotalObj.text) + parseCurrency(ecoTaxObj.text) + parseCurrency(vatObj.text);",
							"    const responseTotal = parseCurrency(totalObj.text);",
							"",
							"    pm.expect(responseTotal).to.be.closeTo(calculatedTotal, 0.01);",
							"});",
							"",
							"pm.test(\"Product total matches price multiplied by quantity\", () => {",
							"    jsonData.products.forEach(product => {",
							"        const parseCurrency = str => parseFloat(str.replace('$', ''));",
							"        const price = parseCurrency(product.price);",
							"        const quantity = Number(product.quantity);",
							"        const expectedTotal = price * quantity;",
							"        const productTotal = parseCurrency(product.total);",
							"",
							"        pm.expect(productTotal).to.be.closeTo(expectedTotal, 0.01);",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{api_token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "api_token",
							"type": "string"
						},
						{
							"key": "in",
							"value": "query",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "product_id",
							"value": "{{product_id}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}api/cart/products",
					"host": [
						"{{baseUrl}}api"
					],
					"path": [
						"cart",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code for add product to cart is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Validate  the success message\",function(){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(\"Success: You have modified your shopping cart!\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{api_token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "api_token",
							"type": "string"
						},
						{
							"key": "in",
							"value": "query",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "key",
							"value": "{{cart_id}}",
							"type": "text"
						},
						{
							"key": "quantity",
							"value": "16",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}api/cart/edit",
					"host": [
						"{{baseUrl}}api"
					],
					"path": [
						"cart",
						"edit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status of remove cart is 200\",function(){",
							"pm.response.to.have.status(200)",
							"});",
							"pm.test(\"validate the success message\",function(){",
							"let responseData = pm.response.json();",
							"pm.expect(responseData.success).to.eql(\"Success: You have modified your shopping cart!\");",
							"});",
							"pm.collectionVariables.unset(\"product_id\");",
							"pm.collectionVariables.unset(\"quantity\");",
							"pm.environment.unset(\"baseUrl\");",
							"pm.collectionVariables.unset(\"cart_id\");",
							"pm.environment.unset(\"api_token\");",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{api_token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "api_token",
							"type": "string"
						},
						{
							"key": "in",
							"value": "query",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "key",
							"value": "{{cart_id}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}api/cart/remove",
					"host": [
						"{{baseUrl}}api"
					],
					"path": [
						"cart",
						"remove"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.environment.set(\"baseUrl\",\"http://192.168.2.79/opencart/upload/index.php?route=\")"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}